from random import randint
import time


def randtest():
    randtest = []
    for i in range(100000):
        randtest.append(randint(100,999))
    return randtest
no = [5,4,3,2,1,10,9,8,7,6,15,14,13,12,11]
test = randtest()

def check(b):
    for i in range(1,len(b)):
        if b[i]<b[i-1]:
            print 'bug'
            break
    return 'good'

#insertion sort

def insertionSort(n):
    for i in range(1, len(n)):
        key = n[i]
        prev = i-1
        while prev >= 0 and n[prev] >key:
            n[prev+1] = n[prev]
            prev -= 1
        #print i
        n[prev+1] = key
    return n


#quicksort


def quickSort(x):
    partition(x, 0, len(x)-1)
    return x  

def partition(n, first, last):
    #si el index es menor. otherwise, es igual. (no puede ser mas grande)
    if first < last:    
       # print 'first: ', str(first)
        #print 'last: ', str(last)
        #print 'n: ', str(n)
        #print 'n[edge]: ', str(n[edge])
        #print 'n[first:last]: ', str(n[first:last+2])
        #escoger index q para pivote
        q = randint(first, last )
        
        #index r para posicionar el pivote
        #print 'q: ', str(q)
        #print 'n[q]: ', str(n[q])
        
        #posicionar el pivote [REVISAR SI ESTA POSICIONADO]
        if q != last:
            swap = n[q]
            n[q] = n[last]
            n[last] = swap
       # print 'nswap: ', str(n[first:last+2])
        #posicionar la division entre mas grande o mas pequeño en primer indice  
        edge = first
        #comparar desde el primero hasta el penúltimo con el último
        for i in range(first, last):
            #number is smaller, swap with edge, increase edge
            #si el primero es mas pequeño, n[i] = n[edge] 
            #mantenemos el edge uno adelante del más pequeño. asi al final,
            #cambiamos el pivote por un numero más grande 
            if n[i] <= n[last]:
                swap = n[i]
                n[i] = n[edge]
                n[edge] = swap
                edge += 1
        #poner el pivote en su lugar
        swap = n[last]
        n[last] = n[edge]
        n[edge] = swap
        
        
        #partition left #no puede ser 0 siempre el first
        partition(n,first, edge-1)
        #partition right
        partition(n, edge+1, last)
        


#textbook quicksort



def textbookQuickSort(n):
    return quickSorted(n, 0, len(n)-1)
    
def textbookQuickSortRand(n):
    return quickSortedRand(n, 0, len(n)-1)

def quickSorted (n, first, last):
    if first < last:
        q = partition2(n, first, last)
        quickSorted(n, first, q-1)
        quickSorted(n, q+1, last)
    return n

def quickSortedRand(n, first, last):
    if first < last:
        q = randpartition(n, first, last)
        quickSorted(n, first, q-1)
        quickSorted(n, q+1, last)
    return n
    
        
def partition2(n, first, last):
        x = n[last]
        i = first-1
        for j in range(first, last):
            if n[j] <= x:
                i += 1
                swap = n[j]
                n[j] = n[i]
                n[i] = swap
        swap = n[i+1]
        n[i+1] = n[last]
        n[last] = swap
        i += 1
        return i
        
def randpartition(n, first, last):
    i = randint(first, last)
    swap = n[i]
    n[i] = n[last]
    n[last] = swap
    return partition2(n, first, last)

#counting sort


def countingSort(n):
    a = []
    b = []
    if len(n) != 0:
        for i in range(max(n)+1):
            a.append(0)
    
    for i in range(len(n)):
        b.append('nil')  
        
    for i in n:
        a[i] += 1
        
    for i in range(1,len(a)):
        a[i] += a[i-1]
        
    for i in reversed(n):
        b[a[i]-1] = i
        a[i] -= 1
        
    return b


#radixsort

def radixSort(n):
    m = []
    for i in range(len(n)):
        m.append(str(n[i]))
    
    b = []
    
    
    for i in range(len(n)):
        b.append('nil')
        
    
    last = 0
    for i in m:
        if len(i)-1>last:
            #print 'len(i): ', str(len(i))
            last = len(i)-1
    
    def countRadix(m, j):    
        if j < 0:
            nn = []
            for i in m:
                nn.append(int(i))
            return nn
        a = []
    
        for i in range(10):
            a.append(0)
        
            
        for i in m:
            a[int(i[j])] += 1
            
        for i in range(1,len(a)):
            a[i] += a[i-1]
        
        for i in reversed(m):
            b[a[int(i[j])]-1] = i
            a[int(i[j])] -= 1
        bb = b[:]
        return countRadix(bb, j-1)
    
    return countRadix(m,last)



#heapsort


def parent(i):
    return ((i-1)/2)
    
def left(i):
    return 2*(i+1)-1
    
def right(i):
    return (i+1)*2
    
def maxheapify(n, i):
    l = left(i)
    r = right(i)
    if l <= len(n)-1 and n[l]>n[i]:
        largest = l
    else: 
        largest = i
    if r <= len(n)-1 and n[r]>n[largest]:
        largest = r
    if largest != i:
        swap = n[i]
        n[i] = n[largest]
        n[largest] = swap
        return maxheapify(n, largest)
    return n

def buildmaxheap(n):
    for i in range((len(n))/2-1, -1, -1):
        maxheapify(n,i)
    return n
    
        
def heapSort(n):
    return buildmaxheap(n)
    for i in range(len(n), 2, -1):
        swap = n[l]
        n[l] = n[i]
        n[i] = swap
        maxheapify(n, l)


test_copy_ins = test[:]
test_copy_q1 = test[:]
test_copy_q2 = test[:]
test_copy_q3 = test[:]
test_copy_ct = test[:]
test_copy_rad = test[:]
test_copy_hp = test[:]

t_ins = time.clock()
insert = insertionSort(test_copy_ins)
te_ins = time.clock()
time_insert = te_ins - t_ins

t_quick1 = time.clock()
quick1 = quickSort(test_copy_q1)
te_quick1 = time.clock()
time_quick1 = te_quick1 - t_quick1

t_quick2 = time.clock()
quick2 = textbookQuickSort(test_copy_q2)
te_quick2 = time.clock()
time_quick2 = te_quick2 - t_quick2


t_quick3 = time.clock()
quick3 = textbookQuickSortRand(test_copy_q3)
te_quick3 = time.clock()
time_quick3 = te_quick3 - t_quick3

t_ct = time.clock()
count = countingSort(test_copy_ct)
te_ct = time.clock()
time_count = te_ct - t_ct

t_rad = time.clock()
radix = radixSort(test_copy_rad)
te_rad = time.clock()
time_radix = te_rad - t_rad

t_heap = time.clock()
heap = heapSort(test_copy_hp)
te_heap = time.clock()
time_heap = te_heap - t_heap



def check2(a):
    for i in range(0,(len(a)/2)-1):
        if a[left(i)] > a[i] or a[right(i)] > a[i]:
            print 'bug'
            break
    return 'good'

print 'Is Data in Order?'
print     
print 'Insertion Sort: ', check(insert)
print 'Quick Sort: ', check(quick1)
print 'Quick Sort 2: ', check(quick2)
print 'Quick Sort 3: ', check(quick3)
print 'Counting Sort: ', check(count)
print 'Radix Sort: ', check(radix)
print 'Heap Sort: ', check2(heap)

print
print 'Time Elapsed'
print 'Insertion sort: ', time_insert
print 'Quicksort: ', time_quick1
print 'Textbook Quicksort: ', time_quick2
print 'Textbook Random Quicksort: ', time_quick3
print 'Counting Sort: ', time_count
print 'Radix Sort: ', time_radix
print 'Heap Sort: ', time_heap

